# -*- coding: utf-8 -*-

import abc

from typing import List, Dict, Any

from ..message import Message
from ..plugin import AbstractPlugin
from ..cerebrum import InteractResponse


class MessageManager(AbstractPlugin):
    """
    Translate the LLM natural language text from the Cerebrum response (`InteractResponse` type) into structured data (generally a `Dict`),
    and encapsulate it with other information in the `InteractResponse` response into a Message for the main task pipeline.

    The most popular form of this is to deserialize LLM json string into python `dict`.
    """

    def __init__(self, config: Dict):
        """
        Configure the MessageManager without initialization.

        Make sure the `type` in the config file is set to "message_manager".

        :param config: configures read from its config file (default to "config.yaml")
        """
        super(MessageManager, self).__init__(config)
        assert self.type=='message_manager'

    @abc.abstractmethod
    def parse(self, response: InteractResponse) -> List[Message]:
        """
        Parse the input `InteractResponse` object into a `Message` object.

        :param response: the input InteractResponse generated by a Cerebrum
        :return: the passed information that encapsulated into a Message
        """
        pass

    def command(self, command_name: str, param: Any, **kwargs) -> Any:
        return {}
